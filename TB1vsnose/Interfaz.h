
#pragma once
#include "iostream"
#include "string"
#include "stdio.h"
#include "windows.h"

using namespace std;
using namespace System;
#define ca " "
//FOREGROUND

class Consola {
public:
    Consola(){}
    void cursor(int x, int y) {
        Console::SetCursorPosition(x, y);
    }

    void AjustarTamanoConsola(int ancho, int alto) {
        Console::SetBufferSize(ancho, alto);
        Console::SetWindowSize(ancho, alto);
    }

    void ImprimirEn(int x, int y, String^ texto) {
        Console::SetCursorPosition(x, y);
        Console::Write(texto);
    }
};
Consola* con = new Consola();

class Colores {
public:

    char* verdeOscuro;
    char* BG_VERDE_OSCURO, * verdeClaro, * Hueso, * BG_ROSA, * BG_amarilloPato;
    char* BG_verdeClaro, * BG_verdeMUYscuro, * BG_verdePastel, * BG_verdeEsmeralda, * BG_verdeOscuro;
    char* BG_celeste, * BG_gris, * BG_rojo, * BG_hueso, * BG_negro, * BG_blanco, * BG_grisclaro, * BG_grisoscuro;
    char* BG_marronclaro, * BG_cafe, * BG_limaclaro, * RESET;
    char* BG_azul, * BG_morado, * BG_rosadoClaro, * BG_naranja;
    char* BG_azulClaro;
    char* BG_marronMUYOscuro;
    char* BG_marronOscuro; 

    Colores() {
        verdeOscuro = "\x1B[38;2;12;54;18m";
        BG_VERDE_OSCURO = "\x1B[48;2;12;54;18m";
        verdeClaro = "\x1B[38;2;146;208;80m";
        Hueso = "\x1B[38;2;237;237;213m";

        BG_ROSA = "\x1B[48;2;255;105;180m";
        BG_amarilloPato = "\x1B[48;2;255;255;180m";

        BG_verdeClaro = "\x1B[48;2;146;208;80m";
        BG_verdeMUYscuro = "\x1B[48;2;12;54;18m";

        BG_verdePastel = "\x1B[48;2;226;255;138m";
        BG_verdeEsmeralda = "\x1B[48;2;45;161;3m";
        BG_verdeOscuro = "\x1B[48;2;31;112;1m";
        BG_celeste = "\x1B[48;2;77;147;217m";
        BG_gris = "\x1B[48;2;173;173;173m";
        BG_rojo = "\x1B[48;2;255;0;0m";
        BG_hueso = "\x1B[48;2;237;237;213m";
        BG_negro = "\x1B[48;2;0;0;0m";
        BG_blanco = "\x1B[48;2;255;255;255m";
        BG_grisclaro = "\x1B[48;2;173;173;173m";
        BG_grisoscuro = "\x1B[48;2;89;89;89m";
        BG_marronclaro = "\x1B[48;2;212;181;114m";
        BG_cafe = "\x1B[48;2;194;117;62m";
        BG_limaclaro = "\x1B[48;2;146;208;80m";
        RESET = "\x1B[0m";

        // NUEVOS COLORES DEFINIDOS
        BG_azul = "\x1B[48;2;0;102;204m";
        BG_morado = "\x1B[48;2;153;50;204m";
        BG_rosadoClaro = "\x1B[48;2;255;182;193m";
        BG_naranja = "\x1B[48;2;255;140;0m";
        BG_azulClaro = "\x1B[48;2;173;216;230m";
        BG_marronMUYOscuro = "\x1B[48;2;59;25;1m";
        BG_marronOscuro = "\x1B[48;2;126;53;14m";
    }

};
Colores* colores = new Colores();

class Cordenada
{
public:
    int x, y;
    int color = 0;
    Cordenada(int px, int py) {
        x = px;
        y = py;
    }

    int getx() { return x; }
    int gety() { return y; }

};

class Color
{
public:
    int frontColor = 0;
    int backColor = 0;
    bool perderseColor;
    Color(int primerfront, int primerback)
    {
        frontColor = primerfront;
        backColor = primerback;
        perderseColor = false;
    }
    void modificarColor(int fnuevo, int bnuevo) {
        frontColor = fnuevo;
        backColor = bnuevo;
    }


    //getters 
    int getforeground() { return frontColor; }
    int getbackground() { return backColor; }
    bool coloresSobrepuestos() { return perderseColor; }
};



//IDEAS
// Una matriz que bloquee la generacion de texto y obligue a saltar linea 
// clases como color para saber que color quiero imprimir (forground o background) para el texto
// almacenar las cordenadas de cada matriz para asi poder guardar bidimensionalmente que color imprimir en x cordenada
// 

class Interfaz
{
public:

    int colorForegrond = 0;
    int colorBackground = 0;
    Interfaz()
    {
    }
    void PosicionarCord(int x, int y) {
        con->cursor(x, y);
    }
    void Pantalla(Color* c) {
        for (int i = 0; i < 30; i++) {
            con->cursor(0, i);
            for (int j = 0; j < 110; j++) {
                ListaDePaletaDeColores(c->backColor);
            }
        };
    }
    void interfazPerspectivaCliente() {
        const int filas = 31;
        const int columnas = 115;
        int carrito[filas][columnas]{
            {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	10,	1,	1,	10,	10,	10,	10,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,		10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (carrito[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (carrito[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (carrito[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (carrito[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (carrito[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (carrito[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (carrito[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (carrito[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (carrito[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (carrito[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (carrito[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (carrito[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (carrito[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (carrito[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (carrito[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }

        con->cursor(0, 0);
    }

    void Imprimir(int x, int y, Color* c, string texto = " ", bool RESET = false) {
        PosicionarCord(x, y);
        const char* foreg;
        const char* backg;
        if (c->backColor == 1) {
            backg = colores->BG_verdeClaro;
        }
        if (c->backColor == 2) {
            backg = colores->BG_verdePastel;
        }
        if (c->backColor == 3) {
            backg = colores->BG_verdeEsmeralda;
        }
        if (c->backColor == 4) {
            backg = colores->BG_verdeOscuro;
        }
        if (c->backColor == 5) {
            backg = colores->BG_celeste;
        }

        if (c->backColor == 6) {
            backg = colores->BG_gris;
        }
        if (c->backColor == 7) {
            backg = colores->BG_rojo;
        }
        if (c->backColor == 8) {
            backg = colores->BG_hueso;
        }
        if (c->backColor == 9) {
            backg = colores->BG_negro;
        }
        if (c->backColor == 10) {
            backg = colores->BG_verdeMUYscuro;
        }
        if (c->backColor == 11) {
            backg = colores->BG_grisclaro;
        }
        if (c->backColor == 12) {
            backg = colores->BG_grisoscuro;
        }
        if (c->backColor == 13) {
            backg = colores->BG_marronclaro;
        }
        if (c->backColor == 14) {
            backg = colores->BG_cafe;
        }
        if (c->backColor == 15) {
            backg = colores->BG_marronMUYOscuro;
        }
        if (c->backColor == 16) {
            backg = colores->BG_marronOscuro;
        }
        //COLOR FOREGROUND
        if (c->frontColor == 1) {
            foreg = colores->verdeClaro;
        }
        if (c->frontColor == 8) {
            foreg = colores->Hueso;
        }
        else
        {
            foreg = colores->verdeOscuro;
        }

        cout << backg << foreg << texto;

        if (texto != " " && RESET == true) { cout << colores->RESET; }

    }

    //PARA ADMIN
    void interfazAdmin() {
        const int filas = 31;
        const int columnas = 115;
        int admin[filas][columnas]{

{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	1,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	1,	1,	10,	10,	1,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},	
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},	
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,		10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
        
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (admin[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (admin[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (admin[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (admin[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (admin[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (admin[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (admin[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (admin[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (admin[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (admin[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (admin[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (admin[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (admin[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (admin[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (admin[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }

        con->cursor(0, 0);
    }

    void interfazContra() {
        const int filas = 31;
        const int columnas = 112;
        int contra[filas][columnas]{
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	10,	1,	10,	10,	1,	1,	10,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	1,	1,	1,	10,	1,	1,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	1,	10,	1,	1,	10,	10,	1,	10,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	1,	1,	1,	10,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	1,	1,	10,	10,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	1,	1,	1,	10,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	10,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	1,	1,	1,	10,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	1,	1,	10,	10,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	1,	1,	1,	10,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	1,	1,	10,	10,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	1,	1,	10,	10,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (contra[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (contra[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (contra[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (contra[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (contra[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (contra[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (contra[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (contra[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (contra[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (contra[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (contra[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (contra[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (contra[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (contra[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (contra[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }

        con->cursor(0, 0);
    }

    void interfazPresentacion() {
        const int filas = 31;
        const int columnas = 115;

        int presentacion[filas][columnas]{
  {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	10,	10,	10,	3,	3,	3,	3,	3,	3,	10,	10,	10,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	10,	10,	10,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	2,	2,	2,	2,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (presentacion[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (presentacion[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (presentacion[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (presentacion[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (presentacion[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (presentacion[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (presentacion[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (presentacion[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (presentacion[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (presentacion[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (presentacion[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (presentacion[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (presentacion[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (presentacion[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (presentacion[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }

        con->cursor(0, 0);
    }

    void interfazPersonal() {
        const int filas = 31;
        const int columnas = 115;

        int personal[filas][columnas]{

{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},


        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (personal[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (personal[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (personal[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (personal[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (personal[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (personal[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (personal[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (personal[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (personal[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (personal[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (personal[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (personal[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (personal[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (personal[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (personal[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }

        con->cursor(0, 0);
    }

    void interfazCliente() {

        const int filas = 31, columnas = 115;
        int clientem[filas][columnas] = {
{            10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10}
        };

        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }

            ListaDePaletaDeColores(clientem[i][j]);
            j++;
        }
    }

    void intefazClientesAdmin() {
        const int filas = 31;
        const int columnas = 115;

        int ordenados[filas][columnas]{
            {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (ordenados[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (ordenados[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (ordenados[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (ordenados[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (ordenados[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (ordenados[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (ordenados[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (ordenados[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (ordenados[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (ordenados[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (ordenados[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (ordenados[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (ordenados[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (ordenados[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (ordenados[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }
    }

    void interfazStockOrdenadoproduct() {
        const int filas = 31;
        const int columnas = 115;
        int productos[filas][columnas]{
            {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10},
{10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	10,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (productos[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (productos[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (productos[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (productos[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (productos[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (productos[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (productos[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (productos[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (productos[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (productos[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (productos[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (productos[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (productos[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (productos[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (productos[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }
    }

    // --- caja // ADMIN
    void interfazClientesActivosTienda() {
        const int filas = 31;
        const int columnas = 115;
        int ActivosClientes[filas][columnas]{
            {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	10,	1,	1,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
        };

        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (ActivosClientes[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (ActivosClientes[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (ActivosClientes[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (ActivosClientes[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (ActivosClientes[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (ActivosClientes[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (ActivosClientes[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (ActivosClientes[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (ActivosClientes[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (ActivosClientes[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (ActivosClientes[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (ActivosClientes[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (ActivosClientes[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (ActivosClientes[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (ActivosClientes[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }
    }
    void interfazCaja() {
        const int filas = 31;
        const int columnas = 115;

        int Caja[filas][columnas]{
            {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
        };

        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (Caja[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (Caja[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (Caja[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (Caja[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (Caja[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (Caja[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (Caja[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (Caja[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (Caja[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (Caja[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (Caja[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (Caja[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (Caja[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (Caja[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (Caja[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }

        con->cursor(0, 0);
    }

    //CLIENTE SALE DEL LOCAL
    void clienteSaleInter() {
        const int filas = 31, columnas = 115;

        int sale[filas][columnas] = {
            {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	10,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	10,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
        };

        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }

            ListaDePaletaDeColores(sale[i][j]);
            j++;
        }


    }


    //ADMIN BOLETAS:
    void AdminBoletas() {
        const int filas = 31, columnas = 115;

        int boletas[filas][columnas] = {
{ 10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	10,	10,	10,	10,	10,	10,	4,	4,	10,	4,	4,	4,	10,	10,	10,	10,	4,	4,	10,	4,	4,	4,	10,	10,	10,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	4,	4,	10,	10,	10,	4,	4,	4,	10,	10,	10,	10,	4,	4,	4,	10,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	4,	4,	4,	10,	10,	10,	10,	4,	4,	10,	4,	4,	4,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	4,	4,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	4,	4,	4,	10,	10,	10,	10,	10,	4,	4,	4,	10,	4,	4,	4,	10,	10,	10,	10,	4,	4,	10,	4,	4,	4,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	4,	4,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	10,	10,	10,	10,	10,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	10,	10,	10,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	4,	4,	10,	10,	10,	4,	4,	4,	10,	10,	10,	10,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	10,	10,	10,	10,	10,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	4,	4,	10,	10,	10,	4,	4,	4,	10,	10,	10,	10,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	4,	4,	10,	10,	10,	4,	4,	4,	10,	10,	10,	10,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10},
{10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10},
{10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10},
{10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10},
{10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10},
{10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10},
{10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10},
{10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10},
{10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10},
{10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10},
{10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10},
{10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10},
{10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10},
{10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10},
{10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10},
{10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10,	10,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10}
        };




        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }

            ListaDePaletaDeColores(boletas[i][j]);
            j++;
        }


    }

    void almacenMenu() {
        const int filas = 31, columnas = 115;

        int almacen[filas][columnas] = {
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	8,	8,	8,	8,	8,	8,	8,	13,	13,	13,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	8,	8,	8,	8,	8,	8,	8,	8,	8,	13,	13,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	13,	12,	12,	12,	12,	12,	12,	12,	12,	12,	13,	13,	13,	12,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	13,	11,	11,	11,	11,	11,	11,	11,	11,	11,	13,	13,	13,	12,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	13,	13,	12,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	13,	13,	12,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	13,	13,	12,	13,	13,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	13,	13,	12,	13,	13,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	13,	13,	12,	13,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	13,	13,	12,	13,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	12,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	1,	10,	10,	10,	10,	1,	10,	10,	1,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	10,	10,	10,	10,	10,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	10,	10,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	1,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	12,	10,	10,	10,	10,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	13,	12,	10,	10,	10,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	5,	5,	5,	5,	5,	5,	5,	13,	13,	13,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	12,	10,	10,	10,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	5,	5,	5,	5,	5,	5,	5,	5,	5,	13,	13,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	12,	10,	10,	10,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	13,	12,	12,	12,	12,	12,	12,	12,	12,	12,	13,	13,	13,	12,	13,	13,	12,	10,	10,	10,	10,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	10,	10,	10,	10,	10,	12,	13,	13,	13,	11,	11,	11,	11,	11,	11,	11,	11,	11,	13,	13,	13,	12,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	13,	13,	12,	13,	13,	12,	10,	10,	10,	10,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	10,	10,	10,	10,	10,	12,	13,	13,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	13,	13,	12,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	13,	13,	12,	13,	13,	10,	10,	10,	10,	10,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	10,	10,	10,	10,	10,	12,	13,	13,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	13,	13,	12,	13,	13,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	13,	13,	12,	13,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	10,	10,	10,	10,	10,	12,	13,	13,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	13,	13,	12,	13,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
        };

        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }

            ListaDePaletaDeColores(almacen[i][j]);
            j++;
        }
    }

    void reporteAlmacen() {
        const int filas = 31, columnas = 115;

        int almacen[filas][columnas] = {
            {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	10,	10},
{10,	10,	10,	10,	10,	10,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	13,	13,	13,	13,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	13,	13,	13,	13,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	10,	10},
{10,	10,	10,	10,	10,	10,	12,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	12,	13,	13,	13,	13,	12,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	12,	13,	13,	13,	13,	12,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	12,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
        };


        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }

            ListaDePaletaDeColores(almacen[i][j]);
            j++;
        }
    }

    void almacenProductos() {

    }

    //caja
    void codigoClientes() {
        const int filas = 31;
        const int columnas = 115;
        int buscarCodigoC[filas][columnas]{
            {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	10,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	10,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (buscarCodigoC[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (buscarCodigoC[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (buscarCodigoC[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (buscarCodigoC[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (buscarCodigoC[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (buscarCodigoC[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (buscarCodigoC[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (buscarCodigoC[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (buscarCodigoC[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (buscarCodigoC[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (buscarCodigoC[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (buscarCodigoC[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (buscarCodigoC[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (buscarCodigoC[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (buscarCodigoC[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }
    }

    //caja interactuando con cliente
    void CajaAtiendeCola() {
        const int filas = 31;
        const int columnas = 115;
        int atencionCola[filas][columnas]{
    {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	7,	7,	7,	7,	7,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	7,	7,	7,	7,	7,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	12,	12,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	10,	10,	10,	10,	10,	12,	12,	12,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	10,	10,	10,	10,	12,	12,	12,	12,	12,	12,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	11,	9,	9,	9,	9,	12,	12,	12,	12,	12,	12,	12,	12,	9,	9,	9,	9,	9,	9,	9,	9,	9,	9,	9,	9,	9,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
    {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (atencionCola[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (atencionCola[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (atencionCola[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (atencionCola[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (atencionCola[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (atencionCola[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (atencionCola[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (atencionCola[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (atencionCola[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (atencionCola[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (atencionCola[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (atencionCola[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (atencionCola[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (atencionCola[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (atencionCola[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }
    }

   
    void interfazCarritoCliente() {
        const int filas = 31;
        const int columnas = 115;

        int carrito[filas][columnas]{
            {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	7,	7,	7,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	11,	11,	11,	10,	10,	7,	7,	7,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	11,	11,	10,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	11,	11,	11,	8,	8,	8,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	11,	11,	11,	8,	8,	8,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	11,	11,	11,	8,	8,	8,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	11,	11,	11,	8,	8,	8,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	11,	11,	10,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	11,	11,	10,	7,	7,	7,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	7,	7,	7,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},

        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (carrito[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (carrito[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (carrito[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (carrito[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (carrito[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (carrito[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (carrito[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (carrito[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (carrito[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (carrito[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (carrito[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (carrito[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (carrito[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (carrito[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (carrito[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }

        con->cursor(0, 0);
    }

    void ProductosStock() {
        const int filas = 31;
        const int columnas = 115;
        int stockmuestra[filas][columnas]{
            {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10},
{10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	10,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (stockmuestra[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (stockmuestra[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (stockmuestra[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (stockmuestra[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (stockmuestra[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (stockmuestra[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (stockmuestra[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (stockmuestra[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (stockmuestra[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (stockmuestra[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (stockmuestra[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (stockmuestra[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (stockmuestra[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (stockmuestra[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (stockmuestra[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }
    }

    void ProductoConsultaTranseferencia() {
        const int filas = 31;
        const int columnas = 115;
        int stockmuestra[filas][columnas]{
            {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10},
{10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	1,	1,	10,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	13,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }

            ListaDePaletaDeColores(stockmuestra[i][j]);
            j++;
        }
    }

    void Productochico1() {
        const int filas = 5;
        const int columnas = 5;
        int Product1[filas][columnas]{
            {11,	11,	11,	11,	11},
{8,	8,	8,	8,	8},
{7,	7,	7,	7,	7},
{7,	7,	7,	7,	7},
{11,	11,	11,	11,	11},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (Product1[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (Product1[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (Product1[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (Product1[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (Product1[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (Product1[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (Product1[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (Product1[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (Product1[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (Product1[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (Product1[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (Product1[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (Product1[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (Product1[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (Product1[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }
    }
    void Productochico2() {
        const int filas = 3;
        const int columnas = 8;
        int producto2[filas][columnas]{
            {11,	11,	11,	11,	11,	11,	11,	11},
3,	3,	3,	3,	3,	3,	3,	3,
{11,	11,	11,	11,	11,	11,	11,	11},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (producto2[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (producto2[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (producto2[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (producto2[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (producto2[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (producto2[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (producto2[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (producto2[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (producto2[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (producto2[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (producto2[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (producto2[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (producto2[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (producto2[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (producto2[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }
    }
    void Productochico3() {
        const int filas = 6;
        const int columnas = 8;
        int Product3[filas][columnas]{
            {8,	8,	8,	8,	8,	8,	8,	8},
{8,	8,	8,	8,	8,	8,	8,	8},
{5,	5,	5,	5,	5,	5,	5,	5},
{5,	5,	5,	5,	5,	5,	5,	5},
{8,	8,	8,	8,	8,	8,	8,	8},
{8,	8,	8,	8,	8,	8,	8,	8},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (Product3[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (Product3[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (Product3[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (Product3[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (Product3[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (Product3[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (Product3[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (Product3[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (Product3[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (Product3[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (Product3[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (Product3[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (Product3[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (Product3[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (Product3[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }
    }

    void carneSprite(int x, int y) {
        const int filas = 8;
        const int columnas = 11;
        int carne[filas][columnas] = {
            {14,14,14,	14,	15,	15,	15,	15,	15,	15,	14},
{14,	14,	14,	15,	16,	16,	16,	16,	16,	16,	15},
{14,	14,	15,	16,	16,	15,	16,	16,	16,	16,	15},
{14,	14,	15,	16,	16,	16,	15,	16,	16,	16,	15},
{14,	15,	16,	16,	15,	16,	16,	16,	16,	15,	14},
{15,	16,	16,	16,	15,	15,	16,	16,	15,	14,	14},
 {15,	16,	16,	16,	16,	16,	16,	15,	14,	14,	14},
{14,	15,	15,	15,	15,	15,	15,	14,	14,	14,	14},
        };

        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j+x, i+ y);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }

            ListaDePaletaDeColores(carne[i][j]);
            j++;
        }

    }

    void Productogrande1(int x, int y) {
        const int filas = 7;
        const int columnas = 18;
        int prodbig1[filas][columnas]{
            {11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8},
{8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8},
{7,	7,	7,	7,	7,	7,	7,	8,	8,	8,	8,	7,	7,	7,	7,	7,	7,	7},
{7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7},
{7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7},
{11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j + x, i + y);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (prodbig1[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (prodbig1[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (prodbig1[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (prodbig1[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (prodbig1[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (prodbig1[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (prodbig1[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (prodbig1[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (prodbig1[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (prodbig1[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (prodbig1[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (prodbig1[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (prodbig1[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (prodbig1[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (prodbig1[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }
    }
    void Productogrande3(int x, int y) {
        const int filas = 5;
        const int columnas = 23;
        int prodbig2[filas][columnas]{
{11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4},
{4,	4,	4,	4,	4,	4,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	4,	4,	4,	4,	4,	4,	4},
{4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4},
{11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j + x, i + y);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (prodbig2[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (prodbig2[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (prodbig2[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (prodbig2[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (prodbig2[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (prodbig2[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (prodbig2[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (prodbig2[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (prodbig2[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (prodbig2[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (prodbig2[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (prodbig2[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (prodbig2[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (prodbig2[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (prodbig2[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }
    }


    void Productogrande2(int x, int y) {
        const int filas = 8;
        const int columnas = 21;
        int prodbig3[filas][columnas]{
          {8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8},
{14,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	14},
{14,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	14},
{14,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	14},
{14,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	14},
{14,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	14},
{14,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	14},
{8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j + x, i + y);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (prodbig3[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (prodbig3[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (prodbig3[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (prodbig3[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (prodbig3[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (prodbig3[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (prodbig3[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (prodbig3[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (prodbig3[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (prodbig3[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (prodbig3[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (prodbig3[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (prodbig3[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (prodbig3[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (prodbig3[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }
    }

    //mismo metodo que arriba creo
    void CajamostrarClientes() {
        const int filas = 31;
        const int columnas = 115;
        int Clientes[filas][columnas]{
        {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10},
{10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (Clientes[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (Clientes[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (Clientes[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (Clientes[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (Clientes[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (Clientes[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (Clientes[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (Clientes[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (Clientes[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (Clientes[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (Clientes[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (Clientes[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (Clientes[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (Clientes[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (Clientes[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }
    }
    void INTERFAZAGREGARCLIENTE() {
        const int filas = 31;
        const int columnas = 115;
        int clientesAgregar[filas][columnas]{
{            10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	10,	10,	10,	3,	3,	10,	10,	3,	3,	10,	10,	10,	3,	3,	10,	3,	3,	3,	3,	3,	3,	10,	10,	3,	3,	10,	10,	10,	10,	3,	10,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	3,	3,	3,	3,	10,	10,	3,	3,	10,	10,	3,	3,	10,	10,	10,	3,	3,	10,	3,	3,	3,	10,	10,	10,	10,	10,	3,	3,	10,	10,	10,	10,	3,	10,	3,	3,	10,	10,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	3,	10,	10,	3,	3,	10,	10,	10,	3,	3,	10,	3,	3,	3,	3,	3,	3,	10,	10,	3,	3,	10,	10,	10,	3,	3,	10,	3,	3,	10,	10,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	10,	3,	3,	3,	3,	10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	3,	3,	3,	10,	10,	10,	10,	10,	3,	3,	3,	10,	10,	3,	3,	10,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	3,	3,	3,	10,	10,	10,	3,	3,	10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	3,	3,	3,	3,	10,	10,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	10,	10,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	10,	4,	4,	10,	10,	10,	4,	4,	10,	4,	4,	4,	4,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	10,	10,	10,	10,	10,	4,	4,	4,	10,	10,	10,	4,	4,	10,	10,	4,	4,	10,	10,	10,	10,	4,	4,	4,	4,	10,	4,	4,	10,	10,	4,	4,	10,	10,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	4,	4,	4,	10,	10,	10,	10,	10,	4,	4,	4,	10,	10,	10,	4,	4,	10,	10,	4,	4,	4,	4,	10,	10,	4,	4,	4,	4,	10,	4,	4,	10,	10,	4,	4,	10,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	4,	4,	4,	10,	10,	10,	10,	10,	4,	4,	4,	10,	10,	10,	4,	4,	10,	10,	4,	4,	10,	10,	10,	10,	4,	4,	10,	4,	4,	4,	4,	10,	10,	4,	4,	10,	10,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	10,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	10,	4,	4,	10,	10,	10,	4,	4,	10,	10,	4,	4,	10,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	8,	4,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	4,	8,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	8,	4,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	4,	8,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	8,	4,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	4,	8,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	8,	4,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	4,	8,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	8,	4,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	4,	8,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	8,	4,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	4,	8,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	8,	4,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	4,	8,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	8,	4,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	4,	8,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	8,	4,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	4,	8,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	8,	4,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	3,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	3,	8,	8,	8,	8,	3,	8,	8,	8,	4,	8,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	8,	4,	8,	8,	8,	8,	8,	8,	4,	4,	4,	4,	4,	4,	4,	4,	8,	8,	8,	8,	8,	8,	3,	8,	8,	8,	8,	8,	4,	4,	4,	4,	4,	4,	4,	4,	8,	8,	8,	8,	8,	3,	3,	8,	8,	8,	8,	8,	4,	8,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	8,	4,	8,	8,	8,	8,	8,	8,	4,	4,	8,	8,	8,	8,	4,	4,	8,	8,	8,	3,	8,	3,	8,	8,	8,	8,	8,	8,	4,	4,	8,	8,	8,	8,	4,	4,	8,	8,	8,	8,	8,	3,	3,	8,	8,	8,	8,	8,	4,	8,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	8,	4,	8,	8,	8,	8,	8,	8,	4,	4,	4,	4,	4,	4,	4,	4,	8,	8,	8,	8,	3,	8,	8,	8,	8,	8,	8,	8,	4,	4,	4,	4,	4,	4,	4,	4,	8,	8,	8,	3,	8,	8,	8,	8,	3,	8,	8,	8,	4,	8,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	8,	4,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	4,	8,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10}

        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            ListaDePaletaDeColores(clientesAgregar[i][j]);
            j++;
        }
    }

    void ingresarCarrito() {
        const int filas = 31;
        const int columnas = 115;

        int carrito[filas][columnas] = {
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	10,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	10,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	1,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	10,	10,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (carrito[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (carrito[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (carrito[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (carrito[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (carrito[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (carrito[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (carrito[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (carrito[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (carrito[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (carrito[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (carrito[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (carrito[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (carrito[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (carrito[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (carrito[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }

        con->cursor(0, 0);
    }

    //switch para paleta de colores
    void ListaDePaletaDeColores(int col) {
        if (col == 0) {
            cout << colores->BG_amarilloPato << " " << colores->RESET;
        }
        if (col == 1) {
            cout << colores->BG_verdeClaro << " " << colores->RESET;
        }
        if (col == 2) {
            cout << colores->BG_verdePastel << " " << colores->RESET;
        }
        if (col == 3) {
            cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
        }
        if (col == 4) {
            cout << colores->BG_verdeOscuro << " " << colores->RESET;
        }
        if (col == 5) {
            cout << colores->BG_celeste << " " << colores->RESET;
        }
        if (col == 6) {
            cout << colores->BG_gris << " " << colores->RESET;
        }
        if (col == 7) {
            cout << colores->BG_rojo << " " << colores->RESET;
        }
        if (col == 8) {
            cout << colores->BG_hueso << " " << colores->RESET;
        }
        if (col == 9) {
            cout << colores->BG_negro << " " << colores->RESET;
        }
        if (col == 10) {
            cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
        }
        if (col == 11) {
            cout << colores->BG_grisclaro << " " << colores->RESET;
        }
        if (col == 12) {
            cout << colores->BG_grisoscuro << " " << colores->RESET;
        }
        if (col == 13) {
            cout << colores->BG_marronclaro << " " << colores->RESET;
        }
        if (col == 14) {
            cout << colores->BG_cafe << " " << colores->RESET;
        }
        if (col == 15) {
            cout << colores->BG_marronMUYOscuro << " " << colores->RESET; 
        }
        if (col == 16) {
            cout << colores->BG_marronOscuro << " " << colores->RESET;
        }

        if (col == 30) {
            cout << colores->BG_azulClaro << " " << colores->RESET;
        }

    }



    void dibujarClienteEnCarrito(int x, int y) {
        const int filas = 13, columnas = 17;
        int mat[13][17] = {
        {   10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	9,	9,	9,	9,	9,	10, },
        {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	9,	9,	9,	9,	9,	10,            },
        {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	9,	9,	9,	9,	9,	10,            },
        {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	9,	9,	9,	10,            },
        {10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	9,	9,	9,	10,            },
        {10,	10,	10,	10,	10,	10,	10,	10,	7,	7,	9,	9,	9,	9,	9,	9,	10,            },
        {11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	9,	9,	9,	10,            },
        {10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	9,	9,	9,	10,            },
        {10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	10,	9,	9,	9,	9,	9,	10,            },
        {10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	10,	9,	9,	9,	9,	9,	10,            },
        {10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	10,	9,	9,	9,	9,	9,	10,            },
        {10,	10,	10,	10,	10,	11,	10,	10,	11,	10,	10,	9,	9,	9,	9,	9,	10,            },
        {10,	10,	12,	12,	12,	12,	10,	10,	12,	12,	10,	9,	9,	9,	9,	9,	10,            },
        };
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                con->cursor(x + j, y + i);ListaDePaletaDeColores(mat[i][j]);
            }
        }
    }
    void mostrarIngresosCorporativo() {

        const int filas = 31, columnas = 116;
        int ingCorp[filas][columnas] = {
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10, 10},
        };

        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }

            ListaDePaletaDeColores(ingCorp[i][j]);
            j++;
        }




    }
    void interfazProductos() {
        const int filas = 31;
        const int columnas = 115;
        int productos[filas][columnas]{
            {},
{10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        3,        3,        3,        3,        3,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10},
{10,        10,        10,        10,        2,        2,        2,        2,        2,        10,        3,        3,        3,        3,        3,        3,        3,        10,        2,        2,        2,        2,        2,        10,        10,        10,        1,        1,        1,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        10,        10,        10,        1,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        10,        10,        10,        10},
{10,        10,        10,        10,        2,        2,        2,        2,        2,        10,        10,        3,        3,        3,        3,        3,        10,        10,        2,        2,        2,        2,        2,        10,        10,        10,        1,        1,        1,        10,        10,        10,        10,        10,        1,        1,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        1,        10,        1,        1,        10,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        10,        1,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        1,        10,        10,        10,        10,        10,        10,        10,        1,        1,        10,        10,        10,        1,        1,        10,        10,        10,        10,        1,        1,        1,        10,        1,        1,        10,        10,        10,        10,        10,        10,        10,        10},
{10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        1,        1,        1,        10,        10,        10,        10,        10,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        10,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        10,        1,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        1,        10,        10,        10,        10,        10,        10,        10,        1,        1,        10,        10,        10,        1,        1,        10,        10,        10,        10,        1,        1,        1,        10,        1,        1,        10,        10,        10,        10,        10,        10,        10,        10},
{10,        10,        10,        3,        3,        3,        3,        3,        10,        10,        10,        4,        4,        4,        4,        4,        10,        10,        10,        3,        3,        3,        3,        3,        10,        10,        1,        1,        1,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        10,        1,        1,        10,        10,        10,        10,        10,        1,        1,        10,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        10,        1,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        1,        10,        10,        10,        10,        10,        10,        10,        1,        1,        10,        10,        10,        1,        1,        10,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        10,        10,        10,        10},
{10,        10,        3,        3,        3,        3,        3,        3,        3,        10,        4,        4,        4,        4,        4,        4,        4,        10,        3,        3,        3,        3,        3,        3,        3,        10,        1,        1,        1,        10,        10,        10,        10,        10,        10,        10,        10,        1,        1,        1,        10,        10,        10,        1,        1,        1,        10,        10,        1,        1,        10,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        10,        10,        10,        1,        1,        1,        10,        1,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        1,        10,        10,        10,        10,        10,        10,        10,        1,        1,        10,        10,        10,        1,        1,        10,        10,        10,        10,        1,        1,        1,        10,        10,        10,        10,        10,        1,        1,        10,        10,        10,        10},
{10,        10,        10,        3,        3,        3,        3,        3,        10,        10,        10,        4,        4,        4,        4,        4,        10,        10,        10,        3,        3,        3,        3,        3,        10,        10,        1,        1,        1,        10,        10,        10,        10,        10,        10,        10,        10,        1,        1,        1,        10,        10,        10,        1,        1,        1,        10,        10,        1,        1,        10,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        10,        10,        10,        1,        1,        10,        10,        1,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        1,        10,        10,        10,        10,        10,        10,        10,        1,        1,        10,        10,        10,        1,        1,        10,        10,        10,        10,        1,        1,        1,        10,        10,        10,        10,        10,        1,        1,        10,        10,        10,        10},
{10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        1,        1,        1,        10,        10,        10,        10,        10,        10,        10,        10,        1,        1,        1,        10,        10,        10,        1,        1,        1,        10,        10,        1,        1,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        1,        10,        10,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        10,        10,        10,        10,        1,        1,        10,        10,        10,        1,        1,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        10,        10,        10,        10},
{10,        10,        10,        10,        2,        2,        2,        2,        2,        10,        10,        3,        3,        3,        3,        3,        10,        10,        2,        2,        2,        2,        2,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10},
{10,        10,        10,        10,        2,        2,        2,        2,        2,        10,        3,        3,        3,        3,        3,        3,        3,        10,        2,        2,        2,        2,        2,        10,        10,        10,        1,        1,        1,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        10,        10,        10,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        10,        10,        10,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        1,        10,        10,        10},
{10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        3,        3,        3,        3,        3,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        10,        1,        1,        10,        10,        10,        10,        10,        10,        1,        1,        1,        1,        10,        1,        1,        1,        10,        1,        1,        10,        10,        10,        1,        1,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        10,        1,        1,        1,        10,        10,        10,        1,        10,        1,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10},
{10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        10,        1,        1,        1,        10,        10,        10,        1,        10,        1,        1,        1,        1,        1,        1,        1,        1,        10,        10,        10},
{10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        10,        1,        1,        10,        10,        10,        10,        10,        10,        1,        1,        10,        10,        1,        1,        1,        1,        10,        1,        1,        10,        10,        10,        1,        1,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        10,        1,        1,        1,        10,        10,        10,        1,        10,        10,        10,        10,        10,        10,        10,        1,        1,        10,        10,        10},
{10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        1,        10,        1,        1,        1,        10,        1,        1,        1,        1,        10,        10,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        10,        1,        1,        10,        10,        10,        10,        10,        10,        1,        1,        10,        10,        1,        1,        1,        1,        10,        1,        1,        10,        10,        10,        1,        1,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        10,        1,        1,        1,        10,        10,        10,        1,        10,        10,        10,        10,        10,        10,        10,        1,        1,        10,        10,        10},
{10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        1,        1,        1,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        10,        10,        10,        1,        1,        1,        1,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        10,        1,        1,        10,        10,        10,        10,        10,        10,        1,        1,        10,        10,        10,        1,        1,        1,        10,        1,        1,        10,        10,        10,        1,        1,        10,        1,        1,        1,        10,        10,        10,        10,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        10,        10,        1,        1,        1,        1,        1,        1,        1,        10,        10,        10},
{10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        1,        1,        1,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        1,        10,        10,        10,        1,        1,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        10,        10,        10,        1,        1,        1,        1,        1,        1,        1,        10,        1,        1,        10,        10,        10,        1,        1,        1,        10,        1,        1,        10,        10,        10,        1,        1,        10,        1,        1,        1,        1,        1,        1,        1,        10,        10,        10,        1,        1,        1,        1,        1,        1,        1,        10,        10,        1,        1,        1,        1,        1,        1,        1,        10,        10,        10},
{},
{},
{10,        10,        10,        10,        10,        10,        0,        0,        10,        10,        4,        4,        4,        4,        4,        4,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        4,        4,        4,        4,        4,        4,        10,        10,        0,        0,        10,        10,        10},
{10,        10,        10,        10,        10,        0,        0,        0,        0,        10,        4,        4,        4,        4,        4,        4,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        4,        4,        4,        4,        4,        4,        10,        0,        0,        0,        0,        10,        10},
{10,        10,        10,        10,        10,        10,        0,        0,        10,        10,        4,        4,        4,        4,        4,        4,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        4,        4,        4,        4,        4,        4,        10,        10,        0,        0,        10,        10,        10},
{10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        4,        4,        4,        4,        4,        4,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        4,        4,        4,        4,        4,        4,        10,        10,        10,        10,        10,        10,        10},
{10,        10,        10,        10,        10,        10,        0,        0,        10,        10,        4,        4,        4,        4,        4,        4,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        4,        4,        4,        4,        4,        4,        10,        10,        0,        0,        10,        10,        10},
{10,        10,        10,        10,        10,        0,        0,        0,        0,        10,        4,        4,        4,        4,        4,        4,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        4,        4,        4,        4,        4,        4,        10,        0,        0,        0,        0,        10,        10},
{10,        10,        10,        10,        10,        10,        0,        0,        10,        10,        4,        4,        4,        4,        4,        4,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        4,        4,        4,        4,        4,        4,        10,        10,        0,        0,        10,        10,        10},
{10,        10,        10,        10,        10,        10,        10,        10,        10,        10,        4,        4,        4,        4,        4,        4,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        4,        4,        4,        4,        4,        4,        10,        10,        10,        10,        10,        10,        10},
{10,        10,        10,        10,        10,        10,        0,        0,        10,        10,        4,        4,        4,        4,        4,        4,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        4,        4,        4,        4,        4,        4,        10,        10,        0,        0,        10,        10,        10},
{10,        10,        10,        10,        10,        0,        0,        0,        0,        10,        4,        4,        4,        4,        4,        4,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        4,        4,        4,        4,        4,        4,        10,        0,        0,        0,        0,        10,        10},
{10,        10,        10,        10,        10,        10,        0,        0,        10,        10,        4,        4,        4,        4,        4,        4,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        2,        4,        4,        4,        4,        4,        4,        10,        10,        0,        0,        10,        10,        10},
        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (productos[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (productos[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (productos[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (productos[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (productos[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (productos[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (productos[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (productos[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (productos[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (productos[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (productos[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (productos[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (productos[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (productos[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (productos[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            j++;
        }
    }


    //interfaz de insio de sesion admin

    void iniciasSesionADMIN() {
        const int filas = 31;
        const int columnas = 115;
        int mapa[filas][columnas] = {
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	1,	1,	1,	10,	10,	1,	10,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	10,	10,	10,	10,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,		1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,		1,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	1,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,		1,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,		1,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	1,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	10,		1,	1,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,		1,	1,	1,	1,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10}

        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (mapa[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (mapa[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (mapa[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (mapa[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (mapa[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (mapa[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (mapa[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (mapa[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (mapa[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (mapa[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (mapa[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (mapa[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (mapa[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (mapa[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (mapa[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            if (mapa[i][j] == 21) {
                cout << colores->BG_naranja << " " << colores->RESET;
            }
            if (mapa[i][j] == 22) {
                cout << colores->BG_azul << " " << colores->RESET;
            }
            if (mapa[i][j] == 23) {
                cout << colores->BG_morado << " " << colores->RESET;
            }
            if (mapa[i][j] == 25) {
                cout << colores->BG_rosadoClaro << " " << colores->RESET;
            }

            j++;
        }
    }


    void MENUAGREGAREMPLEADOS() {
        const int filas = 31;
        const int columnas = 115;
        int mapa[filas][columnas] = {
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,		10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	10,	4,	4,	10,	10,	10,	10,	4,	4,	4,	4,	10,	4,	4,	10,	10,	10,	10,	4,	4,	4,	4,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	4,	4,	10,	10,	10,	10,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	10,	10,	4,	4,	10,	10,	10,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,		10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	10,	10,	10,	10,	10,	10,	4,	4,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	10,	4,	4,	10,	4,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	10,	4,	10,	10,	10,	10,	10,	10,	4,	4,	10,	10,	4,	4,	10,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	4,	10,	10,	10,	10,	10,	10,	4,	4,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	10,	4,	4,	10,	4,	4,	4,	4,	4,	4,	10,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	10,	4,	10,	10,	10,	10,	10,	10,	4,	4,	10,	10,	4,	4,	10,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	3,	3,	3,	3,	3,	3,	3,	10,	4,	4,	4,	4,	4,	4,	4,	10,	3,	3,	3,	3,	3,	3,	3,	10,	10,	10,	10,	4,	10,	10,	10,	10,	10,	10,	4,	4,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	10,	4,	4,	10,	10,	10,	4,	4,	4,	4,	10,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	10,	4,	10,	10,	10,	10,	10,	10,	4,	4,	10,	10,	4,	4,	10,	10,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	4,	4,	4,	4,	4,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	10,	10,	10,	4,	4,	4,	4,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	4,	4,	10,	10,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	10,	3,	3,	3,	3,	3,	10,	10,	2,	2,	2,	2,	2,	10,	10,		10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,		4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10},
{10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	10,	3,	3,	3,	3,	3,	3,	3,	10,	2,	2,	2,	2,	2,	10,	10,		10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	4,	10,	10,	4,	4,	4,	4,	10,	10,	4,	10,	4,	4,	10,	10,	10,	10,	4,	4,	4,	4,	10,	4,	4,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	10,	4,	10,	10,	10,	10,	10,	10,	10,	10,	4,	10,	4,	10,	10,	10,	10,	10,	10,	4,	4,	4,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	3,	3,	3,	3,	3,	10,	10,	10,	10,	10,	10,	10,	10,	10,		10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	10,	10,	4,	4,	4,	4,	10,	10,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,		4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	10,	10,	10,	10,	10,	10,	10,	10,	4,	10,	4,	10,	10,	10,	10,	10,	10,	4,	4,	4,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,		10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	4,	10,	10,	10,	10,	10,	10,	10,	10,	4,	10,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,		4,	10,	10,	10,	10,	10,	4,	4,	4,	10,	4,	10,	10,	10,	10,	10,	10,	10,	10,	4,	10,	4,	10,	10,	10,	10,	10,	10,	4,	4,	4,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,		10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	4,	10,	10,	10,	10,	10,	10,	10,	10,	4,	10,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,		4,	10,	10,	10,	10,	10,	4,	4,	4,	10,	4,	10,	10,	10,	10,	10,	10,	10,	10,	4,	10,	4,	10,	10,	10,	10,	10,	10,	4,	4,	4,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,		10,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10,	4,	10,	10,	10,	10,	10,	10,	10,	10,	4,	10,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	10,	10,	10,	10,	10,		4,	10,	10,	10,	10,	10,	4,	4,	4,	10,	4,	10,	10,	10,	10,	10,	4,	4,	4,	4,	10,	4,	10,	10,	10,	10,	10,	10,	4,	4,	4,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,		10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	10,	10,	10,	10,	10,	10,	10,	10,	4,	10,	4,	4,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,		4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10},
{10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10},
{10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10},
{10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10},
{10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10},
{10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10},
{10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10},
{10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10},
{10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10},
{10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10,	10,	10,	13,	13,	13,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	13,	13,	13,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10}

        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (mapa[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (mapa[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (mapa[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (mapa[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (mapa[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (mapa[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (mapa[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (mapa[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (mapa[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (mapa[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (mapa[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (mapa[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (mapa[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (mapa[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (mapa[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            if (mapa[i][j] == 21) {
                cout << colores->BG_naranja << " " << colores->RESET;
            }
            if (mapa[i][j] == 22) {
                cout << colores->BG_azul << " " << colores->RESET;
            }
            if (mapa[i][j] == 23) {
                cout << colores->BG_morado << " " << colores->RESET;
            }
            if (mapa[i][j] == 25) {
                cout << colores->BG_rosadoClaro << " " << colores->RESET;
            }

            j++;
        }
    }





    //INTERFACES RESPECTO AL DELIVERRY !!!

    void mapa_Tottus() {
        const int filas = 31;
        const int columnas = 115;
        int mapa[filas][columnas] = {

{8,	8,	8,	8,	3,	 22,	 22,	 22,	 22,	 22,	3,	8,	 22,	 22,	 22,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	9,	9,	9,	9,	9,	9,	9,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	9,	0,	0,	0,	9,	8,	8,	8,	8,	8,	8,	8,	 22,	 22,	 22,	 22,	 22,	 22,	0,	0,	0,	0,	0,	0,	4,	4,	9,	1,	3,	1,	3,	1,	3,	9,	8,	 22,	 22,	 22,	 21,	 21,	 21,	8,	14,	14,	14,	4,		4,	7,	7,	7,	0,	0,	0,	8,	8,	14,	14,	14,	8,	8},
{8,	8,	8,	8,	3,	 22,	3,	3,	3,	 22,	3,	8,	5,	 22,	5,	8,	8,	12,	12,	8,	8,	5,	5,	5,	5,	5,	5,	5,	5,	8,	10,	10,	10,	 21,	10,	10,	10,	8,	8,	8,	5,	5,	5,	5,	5,	5,	5,	5,	8,	8,	8,	8,	8,	9,	0,	0,	0,	9,	8,	8,	8,	8,	8,	8,	8,	 22,	 22,	 22,	10,	10,	 22,	 23,	 23,	 23,	 23,	5,	 23,	10,	10,	9,	1,	3,	1,	3,	1,	3,	10,	8,	 22,	10,	 22,	 21,	8,	 21,	8,	14,	8,	14,	10,		10,	7,	10,	7,	 23,	 23,	 23,	8,	8,	14,	8,	14,	8,	8},
{8,	 22,	 22,	 22,	3,	 22,	 22,	 22,	 22,	 22,	3,	8,	 22,	 22,	 22,	8,	12,	12,	12,	12,	8,	5,	10,	10,	10,	10,	10,	10,	5,	8,	8,	8,	8,	 21,	8,	8,	8,	8,	8,	8,	5,	10,	10,	10,	10,	10,	10,	5,	7,	7,	7,	7,	7,	9,	 23,	0,	 23,	9,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	9,	1,	3,	1,	3,	1,	10,	10,	10,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,		11,	11,	11,	11,	11,	11,	11,	 25,	 25,	2,	2,	3,	2,	2},
{8,	 22,	 22,	 22,	3,	3,	3,	3,	3,	3,	3,	8,	5,	 22,	5,	8,	 23,	 23,	 23,	 23,	8,	5,	10,	5,	5,	5,	5,	10,	5,	8,	9,	9,	8,	 21,	8,	8,	9,	8,	8,	8,	5,	10,	5,	5,	5,	5,	10,	5,	7,	8,	8,	8,	7,	9,	 23,	 23,	 23,	9,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	9,	1,	3,	1,	3,	1,	10,	7,	10,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,		11,	11,	11,	11,	11,	11,	11,	 25,	 25,	3,	3,	4,	3,	3},
{8,	5,	 22,	5,	8,	8,	2,	2,	3,	2,	2,	8,	14,	14,	14,	8,	14,	14,	14,	14,	8,	5,	10,	5,	10,	10,	5,	10,	5,	8,	10,	10,	8,	 21,	8,	8,	10,	14,	14,	14,	5,	10,	5,	10,	10,	5,	10,	5,	7,	8,	8,	8,	7,	9,	8,	8,	8,	9,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	9,	9,	9,	4,	4,	4,	7,	7,	7,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	2,	2,	3,	2,	2},
{8,	 22,	 22,	 22,	8,	8,	3,	3,	4,	3,	3,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	3,	3,	3,	8,	5,	5,	5,	5,	5,	5,	5,	5,	11,	11,	11,	11,	11,	11,	9,	4,	9,	4,	10,	7,	10,	11,	11,	11,	8,	7,	7,	8,	8,	7,	7,	8,		8,	7,	7,	8,	8,	7,	7,	11,	11,	8,	10,	10,	10,	8},
{8,	5,	 22,	5,	7,	7,	2,	2,	3,	2,	2,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 23,	5,	 23,	8,	5,	10,	10,	10,	10,	10,	10,	5,	11,	11,	11,	11,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	8,	14,	14,	7,	7,	14,	14,	7,		7,	14,	14,	7,	7,	14,	14,	11,	11,	10,	 23,	 23,	 23,	10},
{8,	 22,	 22,	7,	7,	7,	7,	8,	8,	8,	14,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	8,	5,	10,	5,	5,	5,	5,	10,	5,	8,	8,	11,	11,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	8,	8,	8,	7,	7,	8,	8,	7,		7,	8,	8,	7,	7,	8,	8,	11,	11,	8,	10,	 23,	10,	8},
{8,	8,	8,	5,	7,	7,	5,	8,	 22,	 22,	14,	11,	11,	11,	5,	5,	5,	5,	5,	5,	4,	4,	4,	4,	4,	11,	11,	11,	11,	12,	12,	12,	12,	12,	12,	12,	12,	3,	3,	3,	3,	3,	3,	0,	0,	0,	0,	0,	0,	0,	13,	12,	12,	13,	3,	3,	3,	11,	11,	 25,	 25,	11,	11,	7,	7,	7,	8,	5,	10,	5,	10,	10,	5,	10,	5,	8,	8,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	8,	8,	8,	14,	14,	8,	8,	14,		14,	7,	7,	14,	14,	7,	7,	11,	11,	8,	 23,	 23,	 23,	8},
{8,	8,	8,	5,	7,	7,	5,	8,	 22,	10,	14,	11,	11,	11,	5,	10,	10,	10,	10,	5,	10,	10,	10,	10,	10,	11,	 25,	 25,	11,	12,	12,	12,	12,	12,	12,	12,	12,	3,	10,	10,	5,	10,	3,	0,	10,	0,	5,	0,	10,	0,	13,	12,	12,	13,	3,	5,	3,	11,	11,	 25,	 25,	11,	11,	7,	7,	7,	8,	8,	8,	8,	8,	8,	8,	8,	4,	4,	4,	8,	5,	11,	11,	11,	8,	12,	8,	14,	8,	14,	11,	11,	11,	8,	7,	7,	8,	8,	7,	7,	8,		8,	7,	7,	8,	8,	7,	7,	11,	11,	12,	12,	12,	12,	12},
{8,	8,	8,	7,	7,	7,	7,	8,	0,	0,	14,	11,	11,	11,	5,	10,	10,	10,	10,	5,	10,	10,	5,	10,	10,	11,	 25,	 25,	11,	10,	5,	5,	10,	10,	5,	5,	10,	3,	10,	10,	5,	10,	3,	0,	10,	0,	5,	0,	10,	0,	13,	12,	12,	13,	3,	5,	3,	11,	11,	11,	11,	11,	11,	13,	13,	13,	10,	10,	10,	10,	10,	8,	8,	8,	8,	4,	8,	8,	5,	11,	11,	11,	8,	12,	7,	7,	7,	7,	11,	11,	11,	8,	14,	14,	8,	8,	14,	14,	12,		 23,	12,	12,	12,	12,	14,	14,	11,	11,	3,	3,	3,	3,	3},
{8,	8,	8,	7,	7,	7,	7,	8,	 23,	 23,	14,	11,	11,	11,	5,	5,	5,	5,	5,	5,	8,	8,	8,	8,	8,	11,	11,	11,	11,	7,	7,	7,	7,	7,	7,	7,	7,	8,	7,	7,	7,	7,	8,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	13,	13,	11,	11,	11,	11,	11,	11,	13,	13,	13,	10,	10,	10,	10,	10,	8,	8,	8,	8,	4,	8,	8,	5,	11,	11,	11,	8,	12,	7,	0,	0,	7,	11,	11,	11,	8,	7,	7,	7,	7,	7,	7,	12,		 23,	12,	12,	12,	12,	12,	12,	11,	11,	3,	 22,	 22,	 22,	3},
{8,	8,	8,	14,	11,	11,	14,	8,	8,	8,	14,	11,	11,	11,	0,	0,	0,	0,	0,	0,	14,	14,	14,	14,	14,	11,	11,	11,	11,	7,	0,	0,	0,	7,	7,	7,	7,	8,	10,	7,	7,	10,	8,	14,	14,	14,	14,	14,	14,	14,	14,	13,	5,	5,	5,	5,	5,	11,	11,	11,	11,	11,	11,	13,	13,	13,	10,	10,	10,	10,	10,	8,	8,	2,	2,	3,	2,	2,	5,	11,	11,	11,	8,	12,	7,	0,	0,	7,	11,	11,	11,	8,	8,	7,	5,	7,	5,	7,	 23,		10,	 23,	12,	 23,	12,	 23,	12,	11,	11,	3,	 22,	3,	 22,	3},
{14,	14,	14,	14,	11,	11,	14,	14,	14,	14,	14,	11,	11,	11,	 23,	 23,	5,	5,	 23,	 23,	13,	13,	5,	5,	13,	11,	11,	11,	11,	7,	7,	7,	7,	7,	7,	7,	7,	8,	8,	7,	7,	8,	8,	14,	8,	8,	8,	8,	8,	8,	14,	13,	5,	10,	5,	10,	5,	11,	11,	11,	11,	11,	11,	10,	10,	10,	13,	13,	13,	13,	13,	8,	8,	3,	3,	4,	3,	3,	5,	11,	11,	11,	8,	12,	7,	0,	0,	7,	11,	11,	11,	8,	8,	7,	7,	7,	7,	7,	 23,		10,	 23,	12,	 23,	12,	 23,	12,	11,	11,	3,	 22,	 22,	 22,	3},
{11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 23,	 23,	5,	5,	 23,	 23,	14,	14,	14,	14,	14,	11,	11,	11,	11,	12,	12,	12,	12,	12,	7,	7,	7,	12,	12,	7,	7,	12,	12,	12,	12,	12,	8,	8,	12,	12,	12,	13,	5,	10,	5,	10,	5,	11,	11,	 25,	 25,	11,	11,	10,	10,	10,	13,	13,	13,	13,	13,	8,	8,	2,	2,	3,	2,	2,	5,	11,	11,	11,	8,	8,	8,	8,	8,	8,	11,	11,	11,	8,	8,	7,	14,	14,	14,	7,	 23,		10,	 23,	10,	 23,	10,	 25,	 25,	11,	11,	3,	3,	3,	3,	3},
{11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	11,	11,	11,	11,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,		11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	11,	11,	11,	11,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,		11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11},
{14,	14,	11,	11,	14,	9,	9,	9,	9,	9,	9,	14,	11,	11,	11,	11,	7,	7,	7,	7,	7,	7,	7,	8,	8,	11,	11,	11,	11,	0,	0,	0,	0,	0,	0,	 22,	 22,	 22,	 22,	 22,	 22,	 22,	 22,	 22,	7,	7,	7,	7,	7,	7,	13,	13,	13,	13,	13,	 21,	 21,	 21,	 21,	 21,	 21,	 21,	 21,	11,	11,	11,	11,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	11,	11,	11,	8,	0,	0,	0,	8,	11,	11,	11,	4,	4,	4,	4,	4,	7,	7,	7,	7,	7,	7,	 21,	 21,	 21,	 21,	11,	11,	12,	12,	12,	12,	12},
{8,	14,	11,	11,	14,	10,	10,	 21,	10,	10,	10,	14,	11,	11,	11,	11,	8,	10,	10,	12,	10,	10,	8,	8,	3,	11,	11,	11,	11,	0,	0,	0,	0,	0,	0,	 22,	 22,	 22,	 22,	 22,	 22,	 22,	 22,	 22,	7,	5,	7,	13,	13,	7,	13,	12,	12,	12,	13,	10,	10,	10,	 21,	10,	10,	10,	10,	11,	11,	11,	11,	7,	3,	3,	3,	3,	3,	3,	4,	1,	3,	1,	3,	1,	4,	11,	11,	11,	0,	0,	0,	0,	0,	11,	11,	11,	13,	13,	13,	13,	13,	7,	7,	7,	7,	7,	7,	 21,	 21,	 21,	 21,	11,	11,	12,	12,	12,	12,	12},
{8,	14,	11,	11,	14,	8,	8,	 21,	8,	8,	8,	14,	11,	11,	11,	11,	8,	8,	8,	12,	8,	8,	8,	8,	8,	11,	11,	11,	11,	7,	7,	7,	7,	7,	7,	5,	10,	5,	10,	5,	10,	5,	9,	5,	7,	7,	7,	13,	13,	7,	13,	12,	12,	12,	13,	8,	8,	8,	 21,	8,	8,	8,	8,	11,	 25,	 25,	11,	5,	1,	1,	1,	1,	1,	1,	4,	1,	3,	1,	3,	1,	4,	11,	11,	11,	8,	5,	5,	5,	8,	11,	11,	11,	13,	13,	13,	13,	13,	0,	5,	5,	0,	5,	0,	10,	10,	5,	10,	11,	11,	12,	12,	10,	10,	12},
{8,	14,	11,	11,	14,	9,	8,	 21,	8,	9,	9,	14,	11,	11,	11,	11,	9,	9,	8,	9,	9,	9,	8,	9,	9,	11,	11,	11,	11,	7,	7,	7,	7,	7,	7,	5,	5,	5,	5,	5,	5,	5,	9,	5,	8,	4,	4,	4,	4,	4,	4,	4,	4,	4,	8,	 21,	 21,	8,	 21,	12,	8,	8,	12,	11,	 25,	 25,	11,	5,	3,	3,	3,	3,	3,	3,	4,	1,	3,	1,	3,	1,	4,	11,	11,	11,	8,	5,	5,	5,	8,	11,	11,	11,	13,	13,	13,	13,	13,	0,	0,	0,	0,	5,	0,	10,	10,	5,	10,	11,	11,	12,	12,	10,	10,	12},
{8,	14,	11,	11,	14,	10,	8,	8,	8,	10,	10,	14,	 25,	 25,	11,	11,	10,	10,	8,	10,	10,	10,	8,	10,	10,	11,	11,	11,	11,	14,	14,	14,	14,	14,	14,	14,	14,	0,	0,	0,	0,	10,	10,	10,	10,	4,	10,	5,	5,	5,	10,	12,	10,	4,	8,	12,	12,	8,	12,	8,	8,	8,	8,	11,	11,	11,	11,	7,	1,	1,	1,	1,	1,	1,	4,	1,	3,	1,	3,	1,	4,	11,	11,	11,	8,	5,	5,	5,	8,	11,	11,	11,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	11,	11,	12,	12,	10,	10,	12},
{8,	7,	7,	7,	7,	8,	8,	8,	8,	8,	8,	14,	 25,	 25,	11,	11,	5,	5,	5,	5,	5,	7,	7,	7,	7,	11,	11,	11,	11,	14,	14,	14,	14,	14,	14,	14,	14,	 23,	 23,	5,	 23,	7,	7,	7,	7,	4,	10,	10,	10,	10,	10,	12,	10,	4,	8,	8,	8,	8,	8,	12,	8,	8,	12,	11,	11,	11,	11,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	11,	11,	11,	8,	8,	8,	8,	8,	11,	11,	11,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	12,	12,	13,	11,	11,	12,	12,	10,	10,	12},
{11,	7,	5,	5,	7,	9,	9,	8,	8,	9,	9,	14,	11,	11,	11,	11,	5,	5,	5,	5,	5,	7,	7,	7,	7,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	14,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	4,	4,	4,	4,	4,	0,	0,	0,	0,	0,	0,	13,	12,	12,	13,	11,	11,	12,	12,	9,	9,	12},
{8,	7,	5,	5,	7,	10,	10,	8,	8,	10,	10,	14,	11,	11,	11,	11,	5,	 22,	13,	 22,	5,	10,	10,	5,	10,	11,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	11,	14,	8,	8,	8,	8,	8,	8,	8,	8,	8,	13,	13,	13,	8,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	4,	4,	4,	4,	4,	0,	0,		0,	0,	0,	13,	12,	12,	13,	11,	11,	12,	12,	12,	12,	12},
{14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	11,	11,	11,	11,	5,	 22,	13,	 22,	5,	10,	10,	5,	10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	11,	14,	5,	5,	5,	5,	5,	5,	5,	5,	8,	12,	13,	12,	8,	11,	11,	11,	11,	11,	 25,	 25,	11,	11,	11,	11,	10,	5,	10,	10,	10,	 23,	 23,	5,	5,	 23,	 23,	13,	12,	12,	13,	11,	11,	12,	12,	10,	10,	12},
{1,	5,	5,	5,	3,	3,	3,	1,	1,	1,	1,	14,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	5,	 22,	 22,	 22,	5,	4,	4,	4,	4,	4,	4,	0,	0,	0,	0,	0,	0,	0,	 22,	 22,	 22,	 22,	 22,	 22,	 22,	7,	7,	7,	7,	7,	11,	11,	11,	11,	14,	5,	10,	10,	10,	10,	10,	10,	5,	8,	13,	13,	13,	8,	3,	3,	3,	3,	3,	 25,	 25,	11,	11,	11,	11,	10,	5,	10,	10,	10,	 23,	 23,	5,	5,	 23,	 23,	13,	12,	12,	13,	11,	11,	12,	12,	10,	10,	12},
{1,	5,	5,	3,	3,	3,	3,	3,	1,	3,	1,	14,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	5,	 22,	13,	 22,	5,	4,	4,	4,	4,	4,	4,	 23,	5,	5,	 23,	5,	 23,	 23,	 22,	3,	3,	3,	 22,	3,	 22,	7,	10,	10,	10,	7,	11,	11,	11,	11,	11,	5,	10,	5,	5,	5,	5,	10,	5,	8,	13,	13,	13,	8,	3,	 22,	 22,	 22,	3,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,		11,	11,	11,	11,	11,	11,	11,	 25,	 25,	12,	12,	9,	9,	12},
{1,	5,	5,	5,	1,	13,	1,	3,	3,	3,	3,	14,	14,	14,	14,	14,	14,	14,	14,	0,	0,	0,	0,	0,	14,	14,	14,	14,	 25,	 25,	11,	11,	11,	5,	 22,	13,	 22,	5,	10,	5,	10,	5,	5,	10,	 23,	 23,	 23,	 23,	5,	 23,	 23,	 22,	 22,	 22,	 22,	 22,	 22,	 22,	7,	10,	10,	10,	7,	11,	11,	11,	11,	11,	5,	10,	5,	10,	10,	5,	10,	5,	8,	12,	12,	12,	8,	3,	 22,	3,	 22,	3,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,		11,	11,	11,	11,	11,	11,	11,	 25,	 25,	12,	12,	12,	12,	12},
{1,	5,	5,	5,	1,	1,	1,	1,	13,	13,	1,	14,	3,	3,	3,	3,	3,	3,	3,	 23,	5,	5,	 23,	 23,	8,	8,	8,	14,	 25,	 25,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	11,	14,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	3,	 22,	 22,	 22,	3,	4,	4,	14,	14,	14,	0,	0,	0,	4,	4,	7,	7,	7,		4,	4,	14,	14,	14,	0,	0,	0,	4,	4,	7,	7,	7,	12},
{1,	5,	5,	5,	1,	1,	1,	1,	1,	1,	1,	14,	3,	10,	10,	10,	5,	10,	3,	 23,	5,	5,	 23,	 23,	8,	8,	8,	14,	14,	14,	14,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	 25,	 25,	11,	14,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	3,	3,	3,	3,	3,	13,	13,	14,	12,	14,	 23,	 23,	 23,	10,	10,	7,	8,	7,		13,	13,	14,	12,	14,	 23,	 23,	 23,	10,	10,	7,	8,	7,	12}



        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (mapa[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (mapa[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (mapa[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (mapa[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (mapa[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (mapa[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (mapa[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (mapa[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (mapa[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (mapa[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (mapa[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (mapa[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (mapa[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (mapa[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (mapa[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            if (mapa[i][j] == 21) {
                cout << colores->BG_naranja << " " << colores->RESET;
            }
            if (mapa[i][j] == 22) {
                cout << colores->BG_azul << " " << colores->RESET;
            }
            if (mapa[i][j] == 23) {
                cout << colores->BG_morado << " " << colores->RESET;
            }
            if (mapa[i][j] == 25) {
                cout << colores->BG_rosadoClaro << " " << colores->RESET;
            }

            j++;
        }
    }
   
    void menuAtenderCaja() {
        const int filas = 31;
        const int columnas = 115;
        int mapa[filas][columnas] = {

{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	10,	10,	10,	10,	1,	10,	10,	10,	1,	1,	1,	10,	1,	1,	10,	10,	10,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	1,	1,	10,	1,	1,	1,	1,	1,	10,	1,	1,	10,	10,	1,	1,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	0,	0,	0,	0,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	0,	0,	0,	0,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	0,	0,	10,	10,	4,	4,	4,	4,	4,	4,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	4,	4,	4,	4,	4,	4,	10,	10,	0,	0,	10,	10,	10,	10,	10,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},
{10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10},



        };
        int i = 0;
        int j = 0;
        while (true)
        {
            con->cursor(j, i);
            if (i == filas) { break; }
            if (j == columnas) { i++; j = 0; cout << endl; }
            if (mapa[i][j] == 0) {
                cout << colores->BG_amarilloPato << " " << colores->RESET;
            }
            if (mapa[i][j] == 1) {
                cout << colores->BG_verdeClaro << " " << colores->RESET;
            }
            if (mapa[i][j] == 2) {
                cout << colores->BG_verdePastel << " " << colores->RESET;
            }
            if (mapa[i][j] == 3) {
                cout << colores->BG_verdeEsmeralda << " " << colores->RESET;
            }
            if (mapa[i][j] == 4) {
                cout << colores->BG_verdeOscuro << " " << colores->RESET;
            }
            if (mapa[i][j] == 5) {
                cout << colores->BG_celeste << " " << colores->RESET;
            }
            if (mapa[i][j] == 6) {
                cout << colores->BG_gris << " " << colores->RESET;
            }
            if (mapa[i][j] == 7) {
                cout << colores->BG_rojo << " " << colores->RESET;
            }
            if (mapa[i][j] == 8) {
                cout << colores->BG_hueso << " " << colores->RESET;
            }
            if (mapa[i][j] == 9) {
                cout << colores->BG_negro << " " << colores->RESET;
            }
            if (mapa[i][j] == 10) {
                cout << colores->BG_verdeMUYscuro << " " << colores->RESET;
            }
            if (mapa[i][j] == 11) {
                cout << colores->BG_grisclaro << " " << colores->RESET;
            }
            if (mapa[i][j] == 12) {
                cout << colores->BG_grisoscuro << " " << colores->RESET;
            }
            if (mapa[i][j] == 13) {
                cout << colores->BG_marronclaro << " " << colores->RESET;
            }
            if (mapa[i][j] == 14) {
                cout << colores->BG_cafe << " " << colores->RESET;
            }
            if (mapa[i][j] == 21) {
                cout << colores->BG_naranja << " " << colores->RESET;
            }
            if (mapa[i][j] == 22) {
                cout << colores->BG_azul << " " << colores->RESET;
            }
            if (mapa[i][j] == 23) {
                cout << colores->BG_morado << " " << colores->RESET;
            }
            if (mapa[i][j] == 25) {
                cout << colores->BG_rosadoClaro << " " << colores->RESET;
            }

            j++;
        }
    }

};