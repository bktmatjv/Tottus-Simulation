#pragma once
#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <queue>
#include "map"
#include "algorithm"
#include <string>

using namespace std;
using namespace System;

#define camVec Camino_Grafo<vector<char>, char> 
#define C(x) ((x) > 'Z' ? (x) - 'a' : (x) - 'A')

typedef unsigned int uint32;
typedef vector<char> t_way;

Interfaz* m = new Interfaz;

void cursor(int x, int y) {
    Console::SetCursorPosition(x, y);
}

// ------------------------
// Clase Lugar : actua como el nodo dentro del grafo 
// ------------------------
template <typename T>
class Lugar {
public:
    char tipo;       // T: tienda, C: casa, E: esquina
    T id;            // Por ejemplo 'A', 'B', 'C', ...
    string nombre;   // Nombre del lugar (opcional)
    int x, y;


    Lugar(char _tipo, T _id, int _y, int _x, string _nombre = "") {
        tipo = _tipo;
        id = _id;
        nombre = _nombre;
        x = _x;
        y = _y;
    }
};

// ------------------------
// Clase para caminos
// ------------------------
template<typename var, typename T>
class Camino_Grafo {
public:
    var way;           // vector del camino actual
    T lastVertex;      // último nodo
    uint32 currentCost;

    Camino_Grafo(uint32 cost, T currentVertex) {
        lastVertex = currentVertex;
        currentCost = cost;
        way.push_back(currentVertex);
    }

    Camino_Grafo(uint32 cost, T currentVertex, const var& currentWay) {
        lastVertex = currentVertex;
        currentCost = cost;
        way = currentWay;
        way.push_back(currentVertex);
    }

    Camino_Grafo(const Camino_Grafo& clone) :
        lastVertex(clone.lastVertex),
        currentCost(clone.currentCost),
        way(clone.way) {
    }

    void mostrarINFO_de_Grafo() {
        string t = "La distancia minima para ir desde tu ubicación hasta el Tottus más cercano es " + to_string(currentCost);
        Color* c = new Color(0, 2);
        m->Imprimir(20, 10,c, t);
        cursor(20, 11); cout << "Las esquinas a la que tiene que ir el delivery son:";
        cursor(20, 12);
        for (auto e : way) {
            cout << e << " ->";
        }
        cout << "LLEGASTE!";
    }



    // Prioridad inversa para que la cola saque el menor costo
    bool operator < (const Camino_Grafo& o) const {
        return o.currentCost < currentCost;
    }
};

// ------------------------
// Clase Mapa : VA A SERVIR ESPECIFICAMENTE PARA EL DELIVERY Y LA TIENDA MÁS CERCANA 
// ------------------------
class Mapa {
public:
    static const int cantNodos = 25; // 25 letras como identificadores

    uint32 G[cantNodos][cantNodos]; // Matriz de adyacencia
    uint32 minCost[cantNodos];      // Costos mínimos
    uint32 costoTemporal; //el costo que va cambiando constantemente 

    map<char, char> Place;// para guardar si es casa o totus
    map<char, pair<int, int>> posiciones; //para guardar la informacion de cada nodo
    bool dentro[25];

    //mapa del camino que puede recorrer

    const int filas = 31;
    const int columnas = 115;

    int camino[31][115] = {


{8,	8,	8,	8,	3,		22,		22,		22,		22,		22,	3,	8,		22,		22,		22,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	9,	9,	9,	9,	9,	9,	9,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	9,	0,	0,	0,	9,	8,	8,	8,	8,	8,	8,	8,		22,		22,		22,		22,		22,		22,	0,	0,	0,	0,	0,	0,	4,	4,	9,	1,	3,	1,	3,	1,	3,	9,	8,		22,		22,		22,		21,		21,		21,	8,	14,	14,	14,	4,		4,	7,	7,	7,	0,	0,	0,	8,	8,	14,	14,	14,	8,	8},
{8,	8,	8,	8,	3,		22,	3,	3,	3,		22,	3,	8,	5,		22,	5,	8,	8,	12,	12,	8,	8,	5,	5,	5,	5,	5,	5,	5,	5,	8,	10,	10,	10,		21,	10,	10,	10,	8,	8,	8,	5,	5,	5,	5,	5,	5,	5,	5,	8,	8,	8,	8,	8,	9,	0,	0,	0,	9,	8,	8,	8,	8,	8,	8,	8,		22,		22,		22,	10,	10,		22,		23,		23,		23,		23,	5,		23,	10,	10,	9,	1,	3,	1,	3,	1,	3,	10,	8,		22,	10,		22,		21,	8,		21,	8,	14,	8,	14,	10,		10,	7,	10,	7,		23,		23,		23,	8,	8,	14,	8,	14,	8,	8},
{8,		22,		22,		22,	3,		22,		22,		22,		22,		22,	3,	8,		22,		22,		22,	8,	12,	12,	12,	12,	8,	5,	10,	10,	10,	10,	10,	10,	5,	8,	8,	8,	8,		21,	8,	8,	8,	8,	8,	8,	5,	10,	10,	10,	10,	10,	10,	5,	7,	7,	7,	7,	7,	9,		23,	0,		23,	9,	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'S ' ,	'S',	9,	1,	3,	1,	3,	1,	10,	10,	10,	'-',	'O ','	O',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',		'-',	'-',	'-',	'-',	'-',	'-',	'-',	'W',	'W',	2,	2,	3,	2,	2},
{8,		22,		22,		22,	3,	3,	3,	3,	3,	3,	3,	8,	5,		22,	5,	8,		23,		23,		23,		23,	8,	5,	10,	5,	5,	5,	5,	10,	5,	8,	9,	9,	8,		21,	8,	8,	9,	8,	8,	8,	5,	10,	5,	5,	5,	5,	10,	5,	7,	8,	8,	8,	7,	9,		23,		23,		23,	9,	'-',	'I',	'I',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'S ' ,	'S',	9,	1,	3,	1,	3,	1,	10,	7,	10,	'-',	'O ','	O',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',		'-',	'-',	'-',	'-',	'-',	'-',	'-',	'W',	'W',	3,	3,	4,	3,	3},
{8,	5,		22,	5,	8,	8,	2,	2,	3,	2,	2,	8,	14,	14,	14,	8,	14,	14,	14,	14,	8,	5,	10,	5,	10,	10,	5,	10,	5,	8,	10,	10,	8,		21,	8,	8,	10,	14,	14,	14,	5,	10,	5,	10,	10,	5,	10,	5,	7,	8,	8,	8,	7,	9,	8,	8,	8,	9,	'-',	'I',	'I',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	9,	9,	9,	4,	4,	4,	7,	7,	7,	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	2,	2,	3,	2,	2},
{8,		22,		22,		22,	8,	8,	3,	3,	4,	3,	3,	'A',	'A',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'H',	'H',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	3,	3,	3,	8,	5,	5,	5,	5,	5,	5,	5,	5,	'-',	'-',	'-',	'-',	'-',	'-',	9,	4,	9,	4,	10,	7,	10,	'-',	'-',	'-',	8,	7,	7,	8,	8,	7,	7,	8,		8,	7,	7,	8,	8,	7,	7,	'-',	'-',	8,	10,	10,	10,	8},
{8,	5,		22,	5,	7,	7,	2,	2,	3,	2,	2,	'A',	'A',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'H',	'H',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',		23,	5,		23,	8,	5,	10,	10,	10,	10,	10,	10,	5,	'-',	'-',	'-',	'-',	'-',	'R',	'R',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	8,	14,	14,	7,	7,	14,	14,	7,		7,	14,	14,	7,	7,	14,	14,	'-',	'-',	10,		23,		23,		23,	10},
{8,		22,		22,	7,	7,	7,	7,	8,	8,	8,	14,	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	10,	10,	10,	8,	5,	10,	5,	5,	5,	5,	10,	5,	8,	8,	'-',	'-',	'-',	'R',	'R',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'U',	'U',	8,	8,	8,	7,	7,	8,	8,	7,		7,	8,	8,	7,	7,	8,	8,	'-',	'-',	8,	10,		23,	10,	8},
{8,	8,	8,	5,	7,	7,	5,	8,		22,		22,	14,	'-',	'-',	'-',	5,	5,	5,	5,	5,	5,	4,	4,	4,	4,	4,	'-',	'-',	'-',	'-',	12,	12,	12,	12,	12,	12,	12,	12,	3,	3,	3,	3,	3,	3,	0,	0,	0,	0,	0,	0,	0,	13,	12,	12,	13,	3,	3,	3,	'-',	'-',	'J',	'J',	'-',	'-',	7,	7,	7,	8,	5,	10,	5,	10,	10,	5,	10,	5,	8,	8,	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-','	U','	U',	8,	8,	8,	14,	14,	8,	8,	14,		14,	7,	7,	14,	14,	7,	7,	'-',	'-',	8,		23,		23,		23,	8},
{8,	8,	8,	5,	7,	7,	5,	8,		22,	10,	14,	'-',	'-',	'-',	5,	10,	10,	10,	10,	5,	10,	10,	10,	10,	10,	'-',	'G',	'G',	'-',	12,	12,	12,	12,	12,	12,	12,	12,	3,	10,	10,	5,	10,	3,	0,	10,	0,	5,	0,	10,	0,	13,	12,	12,	13,	3,	5,	3,	'-',	'-',	'J',	'J',	'-',	'-',	7,	7,	7,	8,	8,	8,	8,	8,	8,	8,	8,	4,	4,	4,	8,	5,	'-',	'-',	'-',	8,	12,	8,	14,	8,	14,	'-',	'-',	'-',	8,	7,	7,	8,	8,	7,	7,	8,		8,	7,	7,	8,	8,	7,	7,	'-',	'-',	12,	12,	12,	12,	12},
{8,	8,	8,	7,	7,	7,	7,	8,	0,	0,	14,	'-',	'-',	'-',	5,	10,	10,	10,	10,	5,	10,	10,	5,	10,	10,	'-',	'G',	'G',	'-',	10,	5,	5,	10,	10,	5,	5,	10,	3,	10,	10,	5,	10,	3,	0,	10,	0,	5,	0,	10,	0,	13,	12,	12,	13,	3,	5,	3,	'-',	'-',	'-',	'-',	'-',	'-',	13,	13,	13,	10,	10,	10,	10,	10,	8,	8,	8,	8,	4,	8,	8,	5,	'-',	'-',	'-',	8,	12,	7,	7,	7,	7,	'-',	'-',	'-',	8,	14,	14,	8,	8,	14,	14,	12,			23,	12,	12,	12,	12,	14,	14,	'-',	'-',	3,	3,	3,	3,	3},
{8,	8,	8,	7,	7,	7,	7,	8,		23,		23,	14,	'-',	'-',	'-',	5,	5,	5,	5,	5,	5,	8,	8,	8,	8,	8,	'-',	'-',	'-',	'-',	7,	7,	7,	7,	7,	7,	7,	7,	8,	7,	7,	7,	7,	8,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	13,	13,	'-',	'-',	'-',	'-',	'-',	'-',	13,	13,	13,	10,	10,	10,	10,	10,	8,	8,	8,	8,	4,	8,	8,	5,	'-',	'-',	'-',	8,	12,	7,	0,	0,	7,	'-',	'-',	'-',	8,	7,	7,	7,	7,	7,	7,	12,			23,	12,	12,	12,	12,	12,	12,	'-',	'-',	3,		22,		22,		22,	3},
{8,	8,	8,	14,	'-',	'-',	14,	8,	8,	8,	14,	'-',	'-',	'-',	0,	0,	0,	0,	0,	0,	14,	14,	14,	14,	14,	'-',	'-',	'-',	'-',	7,	0,	0,	0,	7,	7,	7,	7,	8,	10,	7,	7,	10,	8,	14,	14,	14,	14,	14,	14,	14,	14,	13,	5,	5,	5,	5,	5,	'-',	'-',	'-',	'-',	'-',	'-',	13,	13,	13,	10,	10,	10,	10,	10,	8,	8,	2,	2,	3,	2,	2,	5,	'-',	'-',	'-',	8,	12,	7,	0,	0,	7,	'-',	'-',	'-',	8,	8,	7,	5,	7,	5,	7,		23,		10,		23,	12,		23,	12,		23,	12,	'-',	'-',	3,		22,	3,		22,	3},
{14,	14,	14,	14,	'-',	'-',	14,	14,	14,	14,	14,	'-',	'-',	'-',		23,		23,	5,	5,		23,		23,	13,	13,	5,	5,	13,	'-',	'-',	'-',	'-',	7,	7,	7,	7,	7,	7,	7,	7,	8,	8,	7,	7,	8,	8,	14,	8,	8,	8,	8,	8,	8,	14,	13,	5,	10,	5,	10,	5,	'-',	'-',	'-',	'-',	'-',	'-',	10,	10,	10,	13,	13,	13,	13,	13,	8,	8,	3,	3,	4,	3,	3,	5,	'-',	'-',	'-',	8,	12,	7,	0,	0,	7,	'-',	'-',	'-',	8,	8,	7,	7,	7,	7,	7,		23,		10,		23,	12,		23,	12,		23,	12,	'-',	'-',	3,		22,		22,		22,	3},
{'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',		23,		23,	5,	5,		23,		23,	14,	14,	14,	14,	14,	'-',	'-',	'-',	'-',	12,	12,	12,	12,	12,	7,	7,	7,	12,	12,	7,	7,	12,	12,	12,	12,	12,	8,	8,	12,	12,	12,	13,	5,	10,	5,	10,	5,	'-',	'-',	'T',	'T',	'-',	'-',	10,	10,	10,	13,	13,	13,	13,	13,	8,	8,	2,	2,	3,	2,	2,	5,	'-',	'-',	'-',	8,	8,	8,	8,	8,	8,	'-',	'-',	'-',	8,	8,	7,	14,	14,	14,	7,		23,		10,		23,	10,		23,	10,	'X',	'X',	'-',	'-',	3,	3,	3,	3,	3},
{'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'B',	'B',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'F',	'F',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'T',	'T',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'Q',	'Q',	'-',	'-',	'-',	'-',	'-',	'V',	'V',	'-',	'-',	'-',	'-',	'-',	'-',	'-',		'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-'},
{'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'B',	'B',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'F',	'F',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'Q',	'Q',	'-',	'-',	'-',	'-',	'-',	'V',	'V',	'-',	'-',	'-',	'-',	'-',	'-',	'-',		'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-'},
{14,	14,	'-',	'-',	14,	9,	9,	9,	9,	9,	9,	14,	'-',	'-',	'-',	'-',	7,	7,	7,	7,	7,	7,	7,	8,	8,	'-',	'-',	'-',	'-',	0,	0,	0,	0,	0,	0,		22,		22,		22,		22,		22,		22,		22,		22,		22,	7,	7,	7,	7,	7,	7,	13,	13,	13,	13,	13,		21,		21,		21,		21,		21,		21,		21,		21,	'-',	'-',	'-',	'-',	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	'-',	'-',	'-',	8,	0,	0,	0,	8,	'-',	'-',	'-',	4,	4,	4,	4,	4,	7,	7,	7,	7,	7,	7,		21,		21,		21,		21,	'-',	'-',	12,	12,	12,	12,	12},
{8,	14,	'-',	'-',	14,	10,	10,		21,	10,	10,	10,	14,	'-',	'-',	'-',	'-',	8,	10,	10,	12,	10,	10,	8,	8,	3,	'-',	'-',	'-',	'-',	0,	0,	0,	0,	0,	0,		22,		22,		22,		22,		22,		22,		22,		22,		22,	7,	5,	7,	13,	13,	7,	13,	12,	12,	12,	13,	10,	10,	10,		21,	10,	10,	10,	10,	'-',	'-',	'-',	'-',	7,	3,	3,	3,	3,	3,	3,	4,	1,	3,	1,	3,	1,	4,	'-',	'-',	'-',	0,	0,	0,	0,	0,	'-',	'-',	'-',	13,	13,	13,	13,	13,	7,	7,	7,	7,	7,	7,		21,		21,		21,		21,	'-',	'-',	12,	12,	12,	12,	12},
{8,	14,	'-',	'-',	14,	8,	8,		21,	8,	8,	8,	14,	'-',	'-',	'-',	'-',	8,	8,	8,	12,	8,	8,	8,	8,	8,	'-',	'-',	'-',	'-',	7,	7,	7,	7,	7,	7,	5,	10,	5,	10,	5,	10,	5,	9,	5,	7,	7,	7,	13,	13,	7,	13,	12,	12,	12,	13,	8,	8,	8,		21,	8,	8,	8,	8,	'-',	'K',	'K',	'-',	5,	1,	1,	1,	1,	1,	1,	4,	1,	3,	1,	3,	1,	4,	'-',	'-',	'-',	8,	5,	5,	5,	8,	'-',	'-',	'-',	13,	13,	13,	13,	13,	0,	5,	5,	0,	5,	0,	10,	10,	5,	10,	'-',	'-',	12,	12,	10,	10,	12},
{8,	14,	'-',	'-',	14,	9,	8,		21,	8,	9,	9,	14,	'-',	'-',	'-',	'-',	9,	9,	8,	9,	9,	9,	8,	9,	9,	'-',	'-',	'-',	'-',	7,	7,	7,	7,	7,	7,	5,	5,	5,	5,	5,	5,	5,	9,	5,	8,	4,	4,	4,	4,	4,	4,	4,	4,	4,	8,		21,		21,	8,		21,	12,	8,	8,	12,	'-',	 'K',	'K',	'-',	5,	3,	3,	3,	3,	3,	3,	4,	1,	3,	1,	3,	1,	4,	'-',	'-',	'-',	8,	5,	5,	5,	8,	'-',	'-',	'-',	13,	13,	13,	13,	13,	0,	0,	0,	0,	5,	0,	10,	10,	5,	10,	'-',	'-',	12,	12,	10,	10,	12},
{8,	14,	'-',	'-',	14,	10,	8,	8,	8,	10,	10,	14,	'C',	'C',	'-',	'-',	10,	10,	8,	10,	10,	10,	8,	10,	10,	'-',	'-',	'-',	'-',	14,	14,	14,	14,	14,	14,	14,	14,	0,	0,	0,	0,	10,	10,	10,	10,	4,	10,	5,	5,	5,	10,	12,	10,	4,	8,	12,	12,	8,	12,	8,	8,	8,	8,	'-',	'-',	'-',	'-',	7,	1,	1,	1,	1,	1,	1,	4,	1,	3,	1,	3,	1,	4,	'-',	'-',	'-',	8,	5,	5,	5,	8,	'-',	'-',	'-',	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	13,	13,	13,	'-',	'-',	12,	12,	10,	10,	12},
{8,	7,	7,	7,	7,	8,	8,	8,	8,	8,	8,	14,	'C',	'C',	'-',	'-',	5,	5,	5,	5,	5,	7,	7,	7,	7,	'-',	'-',	'-',	'-',	14,	14,	14,	14,	14,	14,	14,	14,		23,		23,	5,		23,	7,	7,	7,	7,	4,	10,	10,	10,	10,	10,	12,	10,	4,	8,	8,	8,	8,	8,	12,	8,	8,	12,	'-',	'-',	'-',	'-',	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	'-',	'-',	'-',	8,	8,	8,	8,	8,	'-',	'-',	'-',	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	13,	12,	12,	13,	'-',	'-',	12,	12,	10,	10,	12},
{'-',	7,	5,	5,	7,	9,	9,	8,	8,	9,	9,	14,	'-',	'-',	'-',	'-',	5,	5,	5,	5,	5,	7,	7,	7,	7,	'-',	'E',	'E',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	14,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	4,	4,	4,	4,	4,	0,	0,	0,	0,	0,	0,	13,	12,	12,	13,	'-',	'-',	12,	12,	9,	9,	12},
{8,	7,	5,	5,	7,	10,	10,	8,	8,	10,	10,	14,	'-',	'-',	'-',	'-',	5,		22,	13,		22,	5,	10,	10,	5,	10,	'-',	'E',	'E',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'L',	'L',	'-',	14,	8,	8,	8,	8,	8,	8,	8,	8,	8,	13,	13,	13,	8,	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	4,	4,	4,	4,	4,	0,	0,		0,	0,	0,	13,	12,	12,	13,	'-',	'-',	12,	12,	12,	12,	12},
{14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	14,	'-',	'-',	'-',	'-',	5,		22,	13,		22,	5,	10,	10,	5,	10,	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'L',	'L',	'-',	14,	5,	5,	5,	5,	5,	5,	5,	5,	8,	12,	13,	12,	8,	'-',	'-',	'-',	'-',	'-',	'P','	P',	'-',	'-',	'-',	'-',	10,	5,	10,	10,	10,		23,		23,	5,	5,		23,		23,	13,	12,	12,	13,	'-',	'-',	12,	12,	10,	10,	12},
{1,	5,	5,	5,	3,	3,	3,	1,	1,	1,	1,	14,	'D',	'D',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	5,		22,		22,		22,	5,	4,	4,	4,	4,	4,	4,	0,	0,	0,	0,	0,	0,	0,		22,		22,		22,		22,		22,		22,		22,	7,	7,	7,	7,	7,	'-',	'-',	'-',	'-',	14,	5,	10,	10,	10,	10,	10,	10,	5,	8,	13,	13,	13,	8,	3,	3,	3,	3,	3,	'P', 	'P',	'-',	'-',	'-',	'-',	10,	5,	10,	10,	10,		23,		23,	5,	5,		23,		23,	13,	12,	12,	13,	'-',	'-',	12,	12,	10,	10,	12},
{1,	5,	5,	3,	3,	3,	3,	3,	1,	3,	1,	14,	'D',	'D',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	5,		22,	13,		22,	5,	4,	4,	4,	4,	4,	4,		23,	5,	5,		23,	5,		23,		23,		22,	3,	3,	3,		22,	3,		22,	7,	10,	10,	10,	7,	'-',	'-',	'-',	'-',	'-',	5,	10,	5,	5,	5,	5,	10,	5,	8,	13,	13,	13,	8,	3,		22,		22,		22,	3,	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',		'-',	'-',	'-',	'-',	'-',	'-',	'-',	'Y',	'Y',	12,	12,	9,	9,	12},
{1,	5,	5,	5,	1,	13,	1,	3,	3,	3,	3,	14,	14,	14,	14,	14,	14,	14,	14,	0,	0,	0,	0,	0,	14,	14,	14,	14,	'N',	'N',	'-',	'-',	'-',	5,		22,	13,		22,	5,	10,	5,	10,	5,	5,	10,		23,		23,		23,		23,	5,		23,		23,		22,		22,		22,		22,		22,		22,		22,	7,	10,	10,	10,	7,	'-',	'-',	'-',	'-',	'-',	5,	10,	5,	10,	10,	5,	10,	5,	8,	12,	12,	12,	8,	3,		22,	3,		22,	3,	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',		'-',	'-',	'-',	'-',	'-',	'-',	'-',	'Y',	'Y',	12,	12,	12,	12,	12},
{1,	5,	5,	5,	1,	1,	1,	1,	13,	13,	1,	14,	3,	3,	3,	3,	3,	3,	3,		23,	5,	5,		23,		23,	8,	8,	8,	14,	'N',	'N',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'M',	'M',	'-',	14,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	3,		22,		22,		22,	3,	4,	4,	14,	14,	14,	0,	0,	0,	4,	4,	7,	7,	7,		4,	4,	14,	14,	14,	0,	0,	0,	4,	4,	7,	7,	7,	12},
{1,	5,	5,	5,	1,	1,	1,	1,	1,	1,	1,	14,	3,	10,	10,	10,	5,	10,	3,		23,	5,	5,		23,		23,	8,	8,	8,	14,	14,	14,	14,	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'-',	'M',	'M',	'-',	14,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	3,	3,	3,	3,	3,	13,	13,	14,	12,	14,		23,		23,		23,	10,	10,	7,	8,	7,		13,	13,	14,	12,	14,		23,		23,		23,	10,	10,	7,	8,	7,	12}


    };

    // Constructor
    Mapa() {
        costoTemporal = 0;

        for (int i = 0; i < cantNodos; i++)
        {
            dentro[i] = false;
        }

        memset(G, 0, sizeof(G));
        memset(minCost, 0xFF, sizeof(minCost));

        // Aristas definidas del grafo
        agregarArista('A', 'H', 250);
        agregarArista('A', 'B', 400);
        agregarArista('B', 'C', 250);
        agregarArista('B', 'F', 250);
        agregarArista('C', 'D', 200);
        agregarArista('D', 'E', 150);
        agregarArista('E', 'F', 500);
        agregarArista('E', 'L', 500);
        agregarArista('F', 'G', 250);
        agregarArista('F', 'T', 500);
        agregarArista('G', 'H', 100);
        agregarArista('H', 'I', 500);
        agregarArista('I', 'J', 50);
        agregarArista('J', 'T', 350);
        agregarArista('T', 'K', 75);
        agregarArista('K', 'L', 75);
        agregarArista('L', 'M', 75);
        agregarArista('M', 'N', 500);
        agregarArista('N', 'E', 170);
        agregarArista('I', 'S', 250);
        agregarArista('S', 'R', 350);
        agregarArista('R', 'U', 200);
        agregarArista('R', 'Q', 350);
        agregarArista('Q', 'T', 250);
        agregarArista('Q', 'P', 110);
        agregarArista('P', 'V', 100);
        agregarArista('Q', 'V', 200);
        agregarArista('V', 'U', 350);
        agregarArista('V', 'X', 100);
        agregarArista('U', 'O', 100);
        agregarArista('O', 'W', 250);
        agregarArista('W', 'X', 450);
        agregarArista('X', 'Y', 150);
        agregarArista('P', 'Y', 250);

        for (size_t i = 0; i < 31; i++)
        {
            for (size_t j = 0; j < 115; j++)
            {
                char cam = camino[i][j];
                int po = C(cam);

                if (isalpha(cam) && !dentro[po]) {
                    dentro[po] = true;
                    if (cam == 'T' || cam == 'W' || cam == 'A') {
                        posiciones[cam] = { i,j };
                        Place[cam] = 'T'; //tienda -> Tottus
                    }
                    else {
                        posiciones[cam] = { i,j };
                        Place[cam] = 'E'; //esquina
                    }
                }
            }
        }


    }

    //para agregar el peso en la matriz de adyacencia
    void agregarArista(char a, char b, uint32 peso) {
        G[C(a)][C(b)] = peso;
        G[C(b)][C(a)] = peso;
    }

    // Algoritmo de Dijkstra
    camVec dijkstra(char source, char dest) {

        priority_queue<camVec> pq;      // Cola de prioridad

        camVec result(0xffffffff, source);
        pq.push(camVec(0, source));
        minCost[C(source)] = 0;

        while (!pq.empty()) {
            camVec current = pq.top();
            pq.pop();

            char u = current.lastVertex;
            uint32 costAcump = current.currentCost;

            if (u == dest) {
                result = current;
                break;
            }

            for (int i = 0; i < cantNodos; ++i) {
                if (G[C(u)][i]) {
                    uint32 newCost = costAcump + G[C(u)][i];
                    if (minCost[i] > newCost) {
                        minCost[i] = newCost;
                        pq.push(camVec(newCost, i + 'A', current.way));
                    }
                }
            }
        }

        costoTemporal = result.currentCost; //costo temporal, solo lo puse para deterinar el ultimo costo y outputearlo facilmente

        memset(minCost, 0xFF, sizeof(minCost)); //se limpia la cantidad de costos (son temporales para determinar de un inicio a un fin)

        return result;

    }

    void dibujarCamino(camVec vec, char source, char dest) {

        bool si = false;
        if (source > dest) si = true;



        //if (si) reverse(vec.way.begin(), vec.way.end());

        int s = (source);
        int y = posiciones[s].second;
        int x = posiciones[s].first;


        for (int i = 1; i < vec.way.size(); i++) {


            int x2 = posiciones[vec.way[i]].first;
            int y2 = posiciones[vec.way[i]].second;


            if (source > dest) {
                while (x != x2) {
                    
                    if (x2 > x) x++;
                    else if (x2 < x) x--;



                    if (camino[x][y - 1] == '-') {
                        cursor(y - 1, x); m->ListaDePaletaDeColores(30);
                    }
                    if (camino[x][y] == '-') {
                        cursor(y, x); m->ListaDePaletaDeColores(30);
                    }if (camino[x][y + 1] == '-') {
                        cursor(y + 1, x); m->ListaDePaletaDeColores(30);
                    }


                    _sleep(50);
                }

                while (y != y2) {
     

                    if (y2 > y) y++;
                    else if (y2 < y) y--;

                    //cursor(30+y, 30+x); cout << mapa[x][y];


                    if (camino[x - 1][y] == '-') {
                        cursor(y, x - 1); m->ListaDePaletaDeColores(30);
                    }
                    if (camino[x][y] == '-') {
                        cursor(y, x); m->ListaDePaletaDeColores(30);
                    }
                    if (camino[x + 1][y] == '-') {
                        cursor(y, x + 1);
                        m->ListaDePaletaDeColores(30);
                    }

                    _sleep(50);
                }


            }
            else {
                while (y != y2) {

                    if (y2 > y) y++;
                    else if (y2 < y) y--;


                    if (camino[x - 1][y] == '-') {
                        cursor(y, x - 1); m->ListaDePaletaDeColores(30);
                    }
                    if (camino[x][y] == '-') {
                        cursor(y, x); m->ListaDePaletaDeColores(30);
                    }
                    if (camino[x + 1][y] == '-') {
                        cursor(y, x + 1);
                        m->ListaDePaletaDeColores(30);
                    }

                    _sleep(50);
                }

                while (x != x2) {
                    
                    if (x2 > x) x++;
                    else if (x2 < x) x--;

                    
                    if (camino[x][y - 1] == '-') {
                        cursor(y - 1, x); m->ListaDePaletaDeColores(30);
                    }
                    if (camino[x][y] == '-') {
                        cursor(y, x); m->ListaDePaletaDeColores(30);
                    }if (camino[x][y + 1] == '-') {
                        cursor(y + 1, x); m->ListaDePaletaDeColores(30);
                    }


                    _sleep(50);
                }

            }

        }

    }

    void dibCam() {

        for (int i = 0; i < cantNodos; i++) {
            cout << "x";
            if (Place[i + 'A'] == 'T') {
                cout << char(i + 'A') << ": " << posiciones[i + 'A'].first << " " << posiciones[i + 'A'].second << endl;
            }
        }


        for (size_t i = 0; i < 31; i++)
        {
            for (size_t j = 0; j < 115; j++)
            {
                if (camino[i][j] >= 65 && camino[i][j] <= 90) {
                    cout << "*";
                }
                else {
                    cout << char(219);
                }
            }

            cout << endl;
        }
    }

    camVec tiendaMasCercana(char source) {

        //Sea V, la cantidad de vertices de nuestro grafo : 25
        //Sea E la cantidad de aristas de nuestro grafo : 34

        char mini = 'T'; // 2
        camVec dT = dijkstra(source, 'T'); // 2 + 25 + 34 log 25 : 27+34×4.64 : 183
        camVec dA = dijkstra(source, 'A'); // 2 + 25 + 34 log 25 : 27+34×4.64 : 183
        camVec dW = dijkstra(source, 'W'); // 2 + 25 + 34 log 25 : 27+34×4.64 : 183

        camVec resultante = dT; // 2

        if (resultante.currentCost > dA.currentCost) { // 3
            resultante = dA; // 1
            mini = 'A'; // 1
        }
        if (resultante.currentCost > dW.currentCost) { // 3
            resultante = dW; // 1
            mini = 'W'; // 1
        }

        dibujarCamino(resultante, source, mini); // O( N + M ) :  dependiendo del grafo

        // 183 * 3 + 2 + 5 + 5 + N + M = 561 + N + M -> O(N+M)

        return resultante;
    }







};
